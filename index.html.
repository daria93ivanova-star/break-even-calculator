<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Калькулятор точки безубыточности — простой</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://cdn.jsdelivr.net" />
  <style>
    .kpi { border-radius: 1.2rem; border: 1px solid rgb(226 232 240); background: white; padding: 1rem; box-shadow: 0 1px 2px rgba(0,0,0,0.05); }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-b from-white to-slate-50 text-slate-800">
  <div class="mx-auto max-w-6xl px-4 py-8">
    <header class="mb-6">
      <h1 class="text-3xl md:text-4xl font-bold tracking-tight">Калькулятор точки безубыточности</h1>
      <p class="mt-2 text-slate-600 max-w-3xl">
        Введите цену, переменные издержки и постоянные расходы — мы посчитаем вклад на единицу, точку безубыточности
        и прибыль при вашем плановом объёме.
      </p>
    </header>

    <section class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
      <div class="md:col-span-2">
        <label class="block text-sm font-medium mb-1">Валюта</label>
        <select id="currency" class="w-full rounded-2xl border border-slate-300 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400">
          <option value="CAD">CAD</option>
          <option value="USD">USD</option>
          <option value="EUR">EUR</option>
          <option value="RUB">RUB</option>
        </select>
      </div>

      <div class="md:col-span-3">
        <label class="block text-sm font-medium mb-1">Постоянные расходы (в месяц)</label>
        <input id="fixedCosts" inputmode="decimal" value="15000"
               class="w-full rounded-2xl border border-slate-300 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400"
               placeholder="Напр.: 15000">
      </div>

      <div class="md:col-span-3">
        <label class="block text-sm font-medium mb-1">Цена за единицу</label>
        <input id="price" inputmode="decimal" value="25"
               class="w-full rounded-2xl border border-slate-300 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400"
               placeholder="Напр.: 25">
      </div>

      <div class="md:col-span-3">
        <label class="block text-sm font-medium mb-1">Переменные издержки на единицу</label>
        <input id="variableCost" inputmode="decimal" value="12"
               class="w-full rounded-2xl border border-slate-300 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400"
               placeholder="Напр.: 12">
      </div>

      <div class="md:col-span-12">
        <label class="block text-sm font-medium mb-1">Ожидаемый объём продаж (необязательно)</label>
        <input id="expectedUnits" inputmode="numeric" value="1200"
               class="w-full rounded-2xl border border-slate-300 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400"
               placeholder="Напр.: 1200">
      </div>
    </section>

    <div id="warn" class="mt-4 hidden rounded-2xl border border-amber-300 bg-amber-50 p-3 text-amber-800">
      Введите корректные значения: цена должна быть больше переменных издержек, все расходы — неотрицательные.
    </div>

    <section class="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
      <div class="kpi"><div class="text-sm text-slate-500">Вклад на единицу</div><div id="kpiContr" class="mt-1 text-2xl font-semibold">—</div><div class="mt-1 text-xs text-slate-500">Цена − переменные издержки</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Точка безубыточности, шт</div><div id="kpiBEUnits" class="mt-1 text-2xl font-semibold">—</div><div class="mt-1 text-xs text-slate-500">Постоянные / вклад</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Точка безубыточности, выручка</div><div id="kpiBERev" class="mt-1 text-2xl font-semibold">—</div><div class="mt-1 text-xs text-slate-500">ТБ × цена</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Маржинальность, %</div><div id="kpiMargin" class="mt-1 text-2xl font-semibold">—</div></div>
    </section>

    <section id="planKpis" class="mt-4 grid grid-cols-1 md:grid-cols-4 gap-4 hidden">
      <div class="kpi" id="planProfitBox"><div class="text-sm text-slate-500">Плановая прибыль</div><div id="kpiProfit" class="mt-1 text-2xl font-semibold">—</div><div class="mt-1 text-xs text-slate-500">(Вклад × объём) − постоянные</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Запас прочности, шт</div><div id="kpiMOSUnits" class="mt-1 text-2xl font-semibold">—</div><div class="mt-1 text-xs text-slate-500">Ожидаемый объём − ТБ</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Запас прочности, %</div><div id="kpiMOSPct" class="mt-1 text-2xl font-semibold">—</div></div>
      <div class="kpi"><div class="text-sm text-slate-500">Подсказка</div><div class="text-sm text-slate-600">Для нескольких товаров используйте средневзвешенный вклад.</div></div>
    </section>

    <section class="mt-8 rounded-3xl border border-slate-200 bg-white p-4 shadow-sm">
      <div class="flex items-baseline justify-between">
        <h2 class="text-lg font-semibold">Профит по объёму продаж</h2>
        <p class="text-sm text-slate-500">Линия = прибыль, вертикальная линия = точка безубыточности</p>
      </div>
      <div class="h-80 w-full">
        <canvas id="profitChart" height="320"></canvas>
      </div>
    </section>

    <footer class="mt-10 text-center text-xs text-slate-500">
      Формулы: вклад = цена − переменные издержки; ТБ (шт) = постоянные / вклад; прибыль = вклад × объём − постоянные.
    </footer>
  </div>

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.1.0/dist/chartjs-plugin-annotation.min.js"></script>

  <script>
    // Helpers
    function parseNumber(v) {
      if (v === null || v === undefined) return 0;
      const cleaned = String(v).replace(/[^0-9.,-]/g, '').replace(/,(?=\\d{3}(\\D|$))/g, '').replace(/\\s+/g, '').replace(',', '.');
      const n = Number(cleaned);
      return Number.isFinite(n) ? n : 0;
    }
    function fmtCurrency(n, cur) {
      try { return new Intl.NumberFormat(undefined, { style: 'currency', currency: cur, maximumFractionDigits: 0 }).format(n); }
      catch { return cur + ' ' + n.toLocaleString(); }
    }
    function fmtNum(n) { return new Intl.NumberFormat(undefined, { maximumFractionDigits: 0 }).format(n); }

    // Elements
    const els = {
      currency: document.getElementById('currency'),
      fixedCosts: document.getElementById('fixedCosts'),
      price: document.getElementById('price'),
      variableCost: document.getElementById('variableCost'),
      expectedUnits: document.getElementById('expectedUnits'),
      warn: document.getElementById('warn'),
      kpiContr: document.getElementById('kpiContr'),
      kpiBEUnits: document.getElementById('kpiBEUnits'),
      kpiBERev: document.getElementById('kpiBERev'),
      kpiMargin: document.getElementById('kpiMargin'),
      planKpis: document.getElementById('planKpis'),
      kpiProfit: document.getElementById('kpiProfit'),
      kpiMOSUnits: document.getElementById('kpiMOSUnits'),
      kpiMOSPct: document.getElementById('kpiMOSPct'),
      planProfitBox: document.getElementById('planProfitBox'),
    };

    // Chart init
    const ctx = document.getElementById('profitChart').getContext('2d');
    Chart.register(window['chartjs-plugin-annotation']);
    let chart;

    function recompute() {
      const cur = els.currency.value;
      const fc = parseNumber(els.fixedCosts.value);
      const p = parseNumber(els.price.value);
      const vc = parseNumber(els.variableCost.value);
      const qExp = Math.max(0, parseNumber(els.expectedUnits.value));

      const contr = Math.max(0, p - vc);
      const invalid = p <= 0 || vc < 0 || fc < 0 || contr <= 0;
      els.warn.classList.toggle('hidden', !invalid);

      const beUnits = contr > 0 ? Math.ceil(fc / contr) : Infinity;
      const beRevenue = Number.isFinite(beUnits) ? beUnits * p : Infinity;
      const marginPct = p > 0 ? ((p - vc) / p) * 100 : 0;

      els.kpiContr.textContent = fmtCurrency(contr, cur);
      els.kpiBEUnits.textContent = Number.isFinite(beUnits) ? fmtNum(beUnits) : '—';
      els.kpiBERev.textContent = Number.isFinite(beRevenue) ? fmtCurrency(beRevenue, cur) : '—';
      els.kpiMargin.textContent = marginPct.toFixed(1) + '%';

      if (qExp > 0 && Number.isFinite(beUnits)) {
        const profitExp = qExp * (p - vc) - fc;
        const mosUnits = Math.max(0, qExp - beUnits);
        const mosPct = (mosUnits / qExp) * 100;
        els.planKpis.classList.remove('hidden');
        els.kpiProfit.textContent = fmtCurrency(profitExp, cur);
        els.kpiMOSUnits.textContent = fmtNum(mosUnits);
        els.kpiMOSPct.textContent = mosPct.toFixed(1) + '%';
        els.planProfitBox.className = 'kpi ' + (profitExp >= 0 ? 'bg-emerald-50 border border-emerald-200' : 'bg-rose-50 border border-rose-200');
      } else {
        els.planKpis.classList.add('hidden');
      }

      // Chart data
      const baseMax = Number.isFinite(beUnits) ? Math.max(beUnits, qExp, 20) : Math.max(qExp, 20);
      const qMax = Math.ceil(baseMax * 1.6);
      const step = Math.max(1, Math.floor(qMax / 50));
      const labels = [];
      const profits = [];
      for (let q = 0; q <= qMax; q += step) {
        labels.push(q);
        profits.push(q * (p - vc) - fc);
      }

      const annos = Number.isFinite(beUnits) ? {
        annotations: {
          line1: {
            type: 'line',
            xMin: beUnits, xMax: beUnits,
            borderColor: 'rgb(239,68,68)',
            borderDash: [6,6],
            borderWidth: 2,
            label: { enabled: true, content: 'ТБ', rotation: -90, position: 'start' }
          }
        }
      } : {};

      if (!chart) {
        chart = new Chart(ctx, {
          type: 'line',
          data: { labels, datasets: [{ label: 'Прибыль', data: profits }] },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: { title: { display: true, text: 'Единиц продано' } },
              y: {
                title: { display: true, text: 'Прибыль' },
                ticks: { callback: (v) => fmtCurrency(v, cur) }
              }
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  label: (ctx) => ' ' + fmtCurrency(ctx.parsed.y, cur),
                  title: (items) => 'Объём: ' + fmtNum(items[0].parsed.x) + ' шт'
                }
              },
              annotation: annos
            }
          }
        });
      } else {
        chart.data.labels = labels;
        chart.data.datasets[0].data = profits;
        chart.options.scales.y.ticks.callback = (v) => fmtCurrency(v, cur);
        chart.options.plugins.annotation = annos;
        chart.update();
      }
    }

    // Events
    ['change','input'].forEach(evt => {
      els.currency.addEventListener(evt, recompute);
      els.fixedCosts.addEventListener(evt, recompute);
      els.price.addEventListener(evt, recompute);
      els.variableCost.addEventListener(evt, recompute);
      els.expectedUnits.addEventListener(evt, recompute);
    });

    // First render
    recompute();
  </script>
</body>
</html>
